apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "product-service.fullname" . }}
  labels:
    app: {{ include "product-service.name" . }}
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "product-service.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "product-service.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: product-service
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
          env:
            - name: SPRING_DATASOURCE_URL
              value: {{ .Values.env.SPRING_DATASOURCE_URL | quote }}
            - name: SPRING_DATASOURCE_USERNAME
              value: {{ .Values.env.SPRING_DATASOURCE_USERNAME | quote }}
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "product-service.fullname" . }}-secret
                  key: postgres-password
            - name: SPRING_REDIS_HOST
              value: {{ .Values.env.SPRING_REDIS_HOST | quote }}
            - name: SPRING_REDIS_PORT
              value: {{ .Values.env.SPRING_REDIS_PORT | quote }}
            - name: SERVER_PORT
              value: {{ .Values.env.SERVER_PORT | quote }}
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: {{ .Values.kafka.bootstrapServers | quote }}
            - name: KAFKA_CONSUMER_GROUP_ID
              value: {{ .Values.kafka.consumerGroupId | quote }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
          readinessProbe:
            {{- if .Values.readinessProbe.enabled }}
            httpGet:
              path: /actuator/health/readiness
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            {{- end }}
          livenessProbe:
            {{- if .Values.livenessProbe.enabled }}
            httpGet:
              path: /actuator/health/liveness
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            {{- end }}
